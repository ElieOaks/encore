linear class Elem : Id
  val elem : int
  def init(elem : int) : unit
    this.elem = elem
  end
end

spine class Node
  var elem : Elem
  once next : Node

  def init(var e : Elem) : unit
    this.elem = consume e
  end
end

lockfree trait Enqueue
  require spec last : Node | elem

  def enqueue(var x : Elem) : unit
    val n = new Node(consume x)
    var done = false
    while not done do
      val oldLast = speculate this.last
      done = try(oldLast.next = n)
      CAT(this.last, oldLast, oldLast.next)
    end
  end
end

lockfree trait Dequeue
  require spec first : Node || elem

  def dequeue() : Elem
    while true do
      val oldFirst = speculate this.first
      if(not isStable(oldFirst.next)) then
        return (null : Elem)
      end
      if (CAT(this.first, oldFirst, oldFirst.next) => elem) then
        return consume elem
      end
    end
    null -- Should never happen
  end
end

class Queue : Enqueue * Dequeue
  spec first : Node || elem
  spec last  : Node | elem

  def init() : unit
    var dummy = new Node(null)
    this.first = consume dummy
    this.last = speculate this.first
  end
end

active class Enqueuer
  val q : Queue
  def init(q:Queue, count:int) : unit
    this.q = q
    this!enqueueLoop(count)
  end

  def enqueueLoop(count:int) : unit
    if count <= 0 then
      ()
    else
      this.q.enqueue(new Elem(count))
      this!enqueueLoop(count-1)
    end
  end
end

active class Dequeuer
  val q : Queue
  def init(q:Queue, count:int) : unit
    this.q = q
    this!dequeueLoop(count)
  end

  def dequeueLoop(count:int) : unit
    if count <= 0 then
      ()
    else
      var ret = this.q.dequeue()
      if ret != null then
        println("Dequeued {}", ret.elem)
      else
        println("Queue was empty")
      end
      this!dequeueLoop(count-1)
    end
  end
end

active class Main
  def main() : unit
    val q = new Queue
    val nEnqueuers = 2
    val nDequeuers = 2
    repeat i <- nEnqueuers do
      new Enqueuer(q, 20)
    end
    repeat i <- nDequeuers do
      new Dequeuer(q, 20)
    end
  end
end