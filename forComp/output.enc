T for
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 165, column 10):
Comparing polymorphic values is unstable.
Later versions of Encore will require type constraints for this to work
Warning at "/home/joy/encore/modules/standard/Collections/Mutable/LinkedList.enc" (line 94, column 24):
Comparing polymorphic values is unstable.
Later versions of Encore will require type constraints for this to work
Warning at "/home/joy/encore/modules/standard/Collections/Mutable/LinkedList.enc" (line 94, column 24):
Comparing polymorphic values is unstable.
Later versions of Encore will require type constraints for this to work
Warning at "/home/joy/encore/modules/standard/Collections/Mutable/LinkedList.enc" (line 261, column 24):
Comparing polymorphic values is unstable.
Later versions of Encore will require type constraints for this to work
TD for
new: let
  __box_mutable__acc = new MutBox[int](acc)
in
  foreach[int](fun (elem : int) => __box_mutable__acc.value = __box_mutable__acc.value + elem, array)
  acc = __box_mutable__acc.value
  print("{}", acc)
end
Warning at "tryFor.enc" (line 9, column 5):
Result of 'for elem <- array do
  acc += elem
end' is discarded
Warning at "tryFor.enc" (line 9, column 5):
Result of 'for elem <- array do
  acc += elem
end' is discarded
TD for
new: let
  __box_mutable__retval = new MutBox[bool](retval)
in
  foreach[String.String](fun (x : String.String) => if x.compare(to_find) == 0 then
                                                      __box_mutable__retval.value = true
                                                    else
                                                      ()
                                                    end, arr)
  retval = __box_mutable__retval.value
  retval
end
TD for
new: let
  __box_mutable__retval = new MutBox[bool](retval)
in
  foreach[t](fun (x : t) => if x == to_find then
                              __box_mutable__retval.value = true
                            else
                              ()
                            end, arr)
  retval = __box_mutable__retval.value
  retval
end
TD for
new: let
  __box_mutable__first = new MutBox[bool](first)
in
  foreach[a](fun (el : a)
               if not(__box_mutable__first.value) then
                 print("{}", new String.String(EMBED (EMBED char* END)
                                                 ", ";
                                               END))
               else
                 __box_mutable__first.value = false
               end
               showEl(el)
             end, arr)
  first = __box_mutable__first.value
  print("{}\n", new String.String(EMBED (EMBED char* END)
                                    "]";
                                  END))
end
TD for
new: let
  __box_mutable__count = new MutBox[int](count)
in
  foreach[a](fun (x : a) => if pred(x) then
                              __box_mutable__count.value = __box_mutable__count.value + 1
                            else
                              ()
                            end, arr)
  count = __box_mutable__count.value
  count
end
TD for
TD for
new: let
in
  (new String.RRange(0, N - 1, 1)).foreach(fun (i : int) => ret(i) = f(tmp(i)))
  ret
end
new: let
  __box_mutable__N = new MutBox[int](N)
in
  foreach[a](fun (el : a) => if p(el) then
                               tmp(__box_mutable__N.value) = el
                               __box_mutable__N.value = __box_mutable__N.value + 1
                             else
                               ()
                             end, arr)
  N = __box_mutable__N.value
  let
    ret = new [b](N)
  in
    let
    in
      (new String.RRange(0, N - 1, 1)).foreach(fun (i : int) => ret(i) = f(tmp(i)))
      ret
    end
  end
end
TD for
TD for
new: let
in
  (new String.RRange(0, N - 1, 1)).foreach(fun (i : int) => ret(i) = tmp(i))
  ret
end
new: let
  __box_mutable__N = new MutBox[int](N)
in
  foreach[a](fun (el : a) => if f(el) then
                               tmp(__box_mutable__N.value) = el
                               __box_mutable__N.value = __box_mutable__N.value + 1
                             else
                               ()
                             end, arr)
  N = __box_mutable__N.value
  if N < |arr| then
    let
      ret = new [a](N)
    in
      let
      in
        (new String.RRange(0, N - 1, 1)).foreach(fun (i : int) => ret(i) = tmp(i))
        ret
      end
    end
  else
    tmp
  end
end
TD for
new: let
in
  (new String.RRange(0, size - 1, 1)).foreach(fun (i : int) => arr(i) = gen(i))
  arr
end
TD for
new: let
in
  (new String.RRange(0, size - 1, 1)).foreach(fun (i : int) => arr(i) = default)
  arr
end
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 34, column 3):
Result of 'for el <- arr do
  if f(el) then
    tmp(N) = el
    N = N + 1
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 34, column 3):
Result of 'for el <- arr do
  if f(el) then
    tmp(N) = el
    N = N + 1
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 58, column 3):
Result of 'for el <- arr do
  if p(el) then
    tmp(N) = el
    N = N + 1
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 58, column 3):
Result of 'for el <- arr do
  if p(el) then
    tmp(N) = el
    N = N + 1
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 75, column 3):
Result of 'for x <- arr do
  if pred(x) then
    count += 1
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 75, column 3):
Result of 'for x <- arr do
  if pred(x) then
    count += 1
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 148, column 3):
Result of 'for el <- arr do
  if not(first) then
    print(", ")
  else
    first = false
  end
  showEl(el)
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 148, column 3):
Result of 'for el <- arr do
  if not(first) then
    print(", ")
  else
    first = false
  end
  showEl(el)
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 164, column 3):
Result of 'for x <- arr do
  if x == to_find then
    retval = true
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 164, column 3):
Result of 'for x <- arr do
  if x == to_find then
    retval = true
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 165, column 10):
Comparing polymorphic values is unstable.
Later versions of Encore will require type constraints for this to work
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 165, column 10):
Comparing polymorphic values is unstable.
Later versions of Encore will require type constraints for this to work
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 178, column 3):
Result of 'for x <- arr do
  if x.compare(to_find) == 0 then
    retval = true
  end
end' is discarded
Warning at "/home/joy/encore/modules/standard/Data/Array.enc" (line 178, column 3):
Result of 'for x <- arr do
  if x.compare(to_find) == 0 then
    retval = true
  end
end' is discarded
 *** Error during typechecking ***
"/home/joy/encore/modules/standard/Data/Either.enc" (line 44, column 12)
'Left(x)' is not a valid pattern
In expression:
  Left(x)
In expression:
  match this with
    case Left(x) =>
      new Left[a, c](x)
    end
    case Right(x) =>
      f(x)
    end

  end
In method 'flatMap' of type 'read Either.Either[a, c]'
In trait 'read Either.Either[a, b]'
