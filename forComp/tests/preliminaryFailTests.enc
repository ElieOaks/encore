--These are preliminary for-comprehension tests
-- The following assumptions have been made:
--  1. It is possible to loop over empty structures
--     which either does nothing,
--     or returns a new struct that is empty.
--  2. It is possible to loop over different kinds of structures
--     If using for as a function call, it will return
--     a similar struct as the first one listed, but perhaps
--     containing elements of different type.
--  3. It is not possible the type of an element in a structure
--  4. Looping over multiple structures is done in a nested may:
--        for x <- [1, 2], y <- [3, 4]
--     would loop over all the y elements for every x element
--  5. Mutable variables can be changed inside a for-loop
--  6. Do not have tests yet, but it should not be able to iterate
--     over a future, but can itterate over a struct containing futures.
--  7. To use for over a structure, it must only allow one type of element
--     i.e. be homogenous

--None of these examples should compile at all

active class Main

  def main() : unit

    -- For comprehension with no containers
    for x do
      x += 1
    end

    -- using a container without map or flatmap in them, like a tuple
    var noFlatMap = ("Hej", "BlÃ¤", 5)
    for x <- noFlatMap do
      x = "Kajsa"
    end

    -- for-body is empty
    var simpleList = for x <- [0 .. 3] do
                     end

    -- not allowed to change a lists type, containers are homogenous
    var li = new LinkedList[String]
    li.insert("Kajsa")
    for x <- li do
      x = 2
    end


  end
end
