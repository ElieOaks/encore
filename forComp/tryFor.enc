import Collections.Mutable.LinkedList

fun useList(list : LinkedList[String]) : unit
  for elem <- list do
    print("{}", elem)
  end
  print("\n")
end

active class Main
  def main() : unit

    var linklistInt = new LinkedList[int]()
    var linklistString = new LinkedList[String]()

    var range = [0 .. 10]
    var range2 = [0 .. 5]

    var array = ["a", "b", "c", "d", "e"]
    var array2 = ["1", "2", "3", "4", "5"]

    for x <- range do
      linklistInt.append(x)
    end
    for x <- array do
      linklistString.append(x)
    end

    -- result in: 1 2 3 4 5 6 7 8 9 10
    for x <- range do
      print("{} ", x)
    end

    print("\n")

    -- result in: 1 2 3 4 5 6 7 8 9 10
    for x <- linklistInt do
      print("{} ", x)
    end

    print("\n")

    -- result in: a b c d e
    for x <- array do
      print("{} ", x)
    end

    print("\n")

    -- result in: a b c d e
    for x <- linklistString do
      print("{} ", x)
    end


    var acc = "0"

    -- result in: a1 a2 a3 a4 a5 b1 b2 b3 b4 b5 c1 c2 c3 c4 c5 d1 d2 d3 d4 d5 e1 e2 e3 e4 e5
    var retList = for x <- array, y <- array2 do
                    acc = y.concatenate(x)
                    print("{} ", acc)
                    y
                    acc
                  end

    -- result in: e5
    print("{} ", acc)
    -- result in: a1 a2 a3 a4 a5 b1 b2 b3 b4 b5 c1 c2 c3 c4 c5 d1 d2 d3 d4 d5 e1 e2 e3 e4 e5
    for x <- retList do
        print("{} ", x)
    end

    print("\n")

    var acc2 = 0
    for i <- range do
      for j <- range do
        acc2 += (i +j)
        if (i == 2) then
          break
        end
      end
    end

    -- result in: 18
    print("{} ", acc2)

    -- result in: a b c d e
    useList(for x <- linklistString do
                x
            end)

  end
end
